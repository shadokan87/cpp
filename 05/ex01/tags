!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$GradeLowHighException_MSG	Bureaucrat.hpp	/^#define $GradeLowHighException_MSG /;"	d
$GradeTooHighException_MSG	Bureaucrat.hpp	/^#define $GradeTooHighException_MSG /;"	d
$HIGH	Bureaucrat.hpp	/^#define $HIGH /;"	d
$LOW	Bureaucrat.hpp	/^#define $LOW /;"	d
BUREAUCRAT_HPP	Bureaucrat.hpp	/^# define BUREAUCRAT_HPP$/;"	d
Bureaucrat	Bureaucrat.cpp	/^Bureaucrat::Bureaucrat(int grade, str name)$/;"	f	class:Bureaucrat
Bureaucrat	Bureaucrat.cpp	/^Bureaucrat::Bureaucrat(void) : name("Ralph la casse"), grade($LOW)$/;"	f	class:Bureaucrat
Bureaucrat	Bureaucrat.hpp	/^class Bureaucrat$/;"	c
CFLAGS	Makefile	/^CFLAGS	=	-Wall -Wextra -Werror$/;"	m
COLOR	Bureaucrat.hpp	/^#define COLOR(/;"	d
CXX	Makefile	/^CXX		=	clang++ -std=c++98$/;"	m
CYAN	Bureaucrat.hpp	/^#define CYAN /;"	d
FORM_HPP	Form.hpp	/^# define FORM_HPP$/;"	d
Form	Form.cpp	/^Form::Form(str name, int signGrade, int executeGrade) : name(name), signGrade(signGrade), executeGrade(executeGrade), isSigned(false)$/;"	f	class:Form
Form	Form.cpp	/^Form::Form(void) : isSigned(false), signGrade(150), executeGrade(150), name("undefined")$/;"	f	class:Form
Form	Form.hpp	/^class Form$/;"	c
GREEN	Bureaucrat.hpp	/^#define GREEN /;"	d
GradeTooHighException	Bureaucrat.hpp	/^			GradeTooHighException(void) {}$/;"	f	class:Bureaucrat::GradeTooHighException
GradeTooHighException	Bureaucrat.hpp	/^		class GradeTooHighException : public std::exception$/;"	c	class:Bureaucrat
GradeTooHighException	Form.hpp	/^			GradeTooHighException(void) {}$/;"	f	class:Form::GradeTooHighException
GradeTooHighException	Form.hpp	/^		class GradeTooHighException : public std::exception$/;"	c	class:Form
GradeTooLowException	Bureaucrat.hpp	/^			GradeTooLowException(void) {}$/;"	f	class:Bureaucrat::GradeTooLowException
GradeTooLowException	Bureaucrat.hpp	/^		class GradeTooLowException : public std::exception$/;"	c	class:Bureaucrat
GradeTooLowException	Form.hpp	/^			GradeTooLowException(void) {}$/;"	f	class:Form::GradeTooLowException
GradeTooLowException	Form.hpp	/^		class GradeTooLowException : public std::exception$/;"	c	class:Form
LFLAGS	Makefile	/^LFLAGS	=	-lpthread$/;"	m
NAME	Makefile	/^NAME	=	Bureaucrat$/;"	m
OBJS	Makefile	/^OBJS	=	$(SRCS:.cpp=.o)$/;"	m
RESET	Bureaucrat.hpp	/^#define RESET /;"	d
RM	Makefile	/^RM		=	rm -f$/;"	m
SPLASHART	Makefile	/^define SPLASHART$/;"	m
SRCS	Makefile	/^SRCS	=	.\/main.cpp .\/Bureaucrat.cpp .\/Form.cpp$/;"	m
YELLOW	Bureaucrat.hpp	/^#define YELLOW /;"	d
beSigned	Form.cpp	/^Form &Form::beSigned(Bureaucrat &src)$/;"	f	class:Form
decreaseGrade	Bureaucrat.cpp	/^void	Bureaucrat::decreaseGrade(void)$/;"	f	class:Bureaucrat
do_if	Bureaucrat.hpp	/^#define do_if(/;"	d
executeGrade	Form.hpp	/^		const int	executeGrade;$/;"	m	class:Form
for_each	Bureaucrat.hpp	/^#define for_each(/;"	d
ft	main.cpp	/^namespace ft$/;"	n	file:
getExecuteGrade	Form.cpp	/^int	Form::getExecuteGrade(void)$/;"	f	class:Form
getGrade	Bureaucrat.cpp	/^unsigned int Bureaucrat::getGrade(void) { return (grade); }$/;"	f	class:Bureaucrat
getName	Bureaucrat.cpp	/^const str Bureaucrat::getName(void) { return (name); }$/;"	f	class:Bureaucrat
getName	Form.cpp	/^str Form::getName(void)$/;"	f	class:Form
getSignGrade	Form.cpp	/^int	Form::getSignGrade(void)$/;"	f	class:Form
getStatus	Form.cpp	/^bool	Form::getStatus(void)$/;"	f	class:Form
grade	Bureaucrat.hpp	/^		unsigned int grade;$/;"	m	class:Bureaucrat
increaseGrade	Bureaucrat.cpp	/^void	Bureaucrat::increaseGrade(void)$/;"	f	class:Bureaucrat
isSigned	Form.hpp	/^		bool isSigned;$/;"	m	class:Form
main	main.cpp	/^int	main(int argc, char **argv)$/;"	f
name	Bureaucrat.hpp	/^		const str name;$/;"	m	class:Bureaucrat
name	Form.hpp	/^		const str name;$/;"	m	class:Form
operator <<	Bureaucrat.cpp	/^std::ostream & operator<<(std::ostream & out, Bureaucrat &src)$/;"	f
operator <<	Form.cpp	/^std::ostream &operator<<(std::ostream & out, Form &src)$/;"	f
operator =	Bureaucrat.cpp	/^Bureaucrat &Bureaucrat::operator=(Bureaucrat &src)$/;"	f	class:Bureaucrat
operator =	Form.cpp	/^Form &Form::operator=(Form &src)$/;"	f	class:Form
signGrade	Form.hpp	/^		const int	signGrade;$/;"	m	class:Form
stoi	main.cpp	/^int		stoi(str elem)$/;"	f	namespace:ft
str	Bureaucrat.hpp	/^typedef std::string str;$/;"	t
str	Form.hpp	/^typedef std::string str;$/;"	t
str	main.cpp	/^typedef std::string str;$/;"	t	file:
strIsdigit	main.cpp	/^bool	strIsdigit(str elem)$/;"	f	namespace:ft
what	Bureaucrat.hpp	/^			virtual const char* what() const throw()	{ return ($GradeLowHighException_MSG); }$/;"	f	class:Bureaucrat::GradeTooLowException
what	Bureaucrat.hpp	/^			virtual const char* what() const throw()	{ return ($GradeTooHighException_MSG); }$/;"	f	class:Bureaucrat::GradeTooHighException
what	Form.hpp	/^			virtual const char* what() const throw()	{ return ($GradeLowHighException_MSG); }$/;"	f	class:Form::GradeTooLowException
what	Form.hpp	/^			virtual const char* what() const throw()	{ return ($GradeTooHighException_MSG); }$/;"	f	class:Form::GradeTooHighException
~Bureaucrat	Bureaucrat.cpp	/^Bureaucrat::~Bureaucrat(void) {}$/;"	f	class:Bureaucrat
~Form	Form.cpp	/^Form::~Form(void)$/;"	f	class:Form
