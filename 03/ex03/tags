!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$ATTACKDAMAGE	ClapTrap.cpp	/^#define $ATTACKDAMAGE /;"	d	file:
$ATTACK_MSG	ClapTrap.cpp	/^#define $ATTACK_MSG(/;"	d	file:
$DAMAGE_MSG	ClapTrap.cpp	/^#define $DAMAGE_MSG(/;"	d	file:
$ENERYPOINTS	ClapTrap.cpp	/^#define $ENERYPOINTS /;"	d	file:
$HITPOINTS	ClapTrap.cpp	/^#define $HITPOINTS /;"	d	file:
$NAME_EXPAND	main.cpp	/^#define $NAME_EXPAND /;"	d	file:
$REPAIR	ClapTrap.cpp	/^#define $REPAIR(/;"	d	file:
$SPAWN	ClapTrap.cpp	/^#define $SPAWN(/;"	d	file:
A	test.cpp	/^A::A() : id(0)$/;"	f	class:A
A	test.cpp	/^A::A(int id)$/;"	f	class:A
A	test.cpp	/^class A$/;"	c	file:
B	test.cpp	/^B::B() {}$/;"	f	class:B
B	test.cpp	/^class B : virtual public A {private: public: B() : id(2) {}; ~B();};$/;"	c	file:
B	test.cpp	/^class B : virtual public A {private: public: B() : id(2) {}; ~B();};$/;"	f	class:B
CFLAGS	Makefile	/^CFLAGS	=	-Wall -Wextra -Werror$/;"	m
CLAP_TRAP_HPP	ClapTrap.hpp	/^# define CLAP_TRAP_HPP$/;"	d
COLOR	ClapTrap.hpp	/^#define COLOR(/;"	d
CXX	Makefile	/^CXX		=	clang++ -std=c++98$/;"	m
CYAN	ClapTrap.hpp	/^#define CYAN /;"	d
ClapTrap	ClapTrap.cpp	/^ClapTrap::ClapTrap() : name(""), hitpoints($HITPOINTS), energyPoints($ENERYPOINTS), attackDamage($ATTACKDAMAGE) $/;"	f	class:ClapTrap
ClapTrap	ClapTrap.cpp	/^ClapTrap::ClapTrap(str name)$/;"	f	class:ClapTrap
ClapTrap	ClapTrap.hpp	/^class ClapTrap$/;"	c
Diamond	main.cpp	/^Diamond::Diamond()$/;"	f	class:Diamond
Diamond	main.cpp	/^Diamond::Diamond(str name) : name(name), FragTrap(name + $NAME_EXPAND)$/;"	f	class:Diamond
Diamond	main.cpp	/^class	Diamond : virtual public FragTrap, virtual public ScavTrap$/;"	c	file:
FragTrap	FragTrap.cpp	/^FragTrap::FragTrap(str name) : ClapTrap(name)$/;"	f	class:FragTrap
FragTrap	FragTrap.cpp	/^FragTrap::FragTrap(void)$/;"	f	class:FragTrap
FragTrap	FragTrap.hpp	/^class	FragTrap : public ClapTrap$/;"	c
GREEN	ClapTrap.hpp	/^#define GREEN /;"	d
LFLAGS	Makefile	/^LFLAGS	=	-lpthread$/;"	m
NAME	Makefile	/^NAME	=	DiamondTrap$/;"	m
OBJS	Makefile	/^OBJS	=	$(SRCS:.cpp=.o)$/;"	m
P	test.cpp	/^void	A::P()$/;"	f	class:A
RESET	ClapTrap.hpp	/^#define RESET /;"	d
RM	Makefile	/^RM		=	rm -f$/;"	m
SPLASHART	Makefile	/^define SPLASHART$/;"	m
SRCS	Makefile	/^SRCS	=	.\/main.cpp .\/ClapTrap.cpp .\/FragTrap.cpp .\/ScavTrap.cpp$/;"	m
ScavTrap	ScavTrap.cpp	/^ScavTrap::ScavTrap(str name) : ClapTrap(name)$/;"	f	class:ScavTrap
ScavTrap	ScavTrap.cpp	/^ScavTrap::ScavTrap(void) : guard(false)$/;"	f	class:ScavTrap
ScavTrap	ScavTrap.hpp	/^class	ScavTrap : public ClapTrap$/;"	c
YELLOW	ClapTrap.hpp	/^#define YELLOW /;"	d
attack	ClapTrap.cpp	/^void	ClapTrap::attack(str const & target)$/;"	f	class:ClapTrap
attackDamage	ClapTrap.hpp	/^		int	attackDamage;$/;"	m	class:ClapTrap
attackDamage	FragTrap.hpp	/^		int	attackDamage;$/;"	m	class:FragTrap
attackDamage	main.cpp	/^		int	attackDamage;$/;"	m	class:Diamond	file:
beRepaired	ClapTrap.cpp	/^void	ClapTrap::beRepaired(unsigned int amount)$/;"	f	class:ClapTrap
energyPoints	ClapTrap.hpp	/^		int	energyPoints;$/;"	m	class:ClapTrap
energyPoints	FragTrap.hpp	/^		int	energyPoints;$/;"	m	class:FragTrap
energyPoints	main.cpp	/^		int	energyPoints;$/;"	m	class:Diamond	file:
guard	ScavTrap.hpp	/^		bool guard;$/;"	m	class:ScavTrap
guardGate	ScavTrap.cpp	/^void	ScavTrap::guardGate(void)$/;"	f	class:ScavTrap
highFivesGuys	FragTrap.cpp	/^void	FragTrap::highFivesGuys(void)$/;"	f	class:FragTrap
hitpoints	ClapTrap.hpp	/^		int	hitpoints;$/;"	m	class:ClapTrap
hitpoints	FragTrap.hpp	/^		int	hitpoints;$/;"	m	class:FragTrap
hitpoints	main.cpp	/^		int	hitpoints;$/;"	m	class:Diamond	file:
id	test.cpp	/^		int id;$/;"	m	class:A	file:
main	main.cpp	/^int	main(void)$/;"	f
main	test.cpp	/^int	main(void)$/;"	f
name	ClapTrap.hpp	/^		str name;$/;"	m	class:ClapTrap
name	main.cpp	/^		str name;$/;"	m	class:Diamond	file:
str	ClapTrap.cpp	/^typedef std::string str;$/;"	t	file:
str	ClapTrap.hpp	/^typedef std::string str;$/;"	t
str	FragTrap.cpp	/^typedef std::string str;$/;"	t	file:
str	ScavTrap.cpp	/^typedef std::string str;$/;"	t	file:
str	ScavTrap.hpp	/^typedef std::string str;$/;"	t
str	main.cpp	/^typedef std::string str;$/;"	t	file:
takeDamage	ClapTrap.cpp	/^void	ClapTrap::takeDamage(unsigned int amount)$/;"	f	class:ClapTrap
~A	test.cpp	/^A::~A()$/;"	f	class:A
~B	test.cpp	/^B::~B() {}$/;"	f	class:B
~ClapTrap	ClapTrap.cpp	/^ClapTrap::~ClapTrap(void)$/;"	f	class:ClapTrap
~Diamond	main.cpp	/^Diamond::~Diamond()$/;"	f	class:Diamond
~FragTrap	FragTrap.cpp	/^FragTrap::~FragTrap(void)$/;"	f	class:FragTrap
~ScavTrap	ScavTrap.cpp	/^ScavTrap::~ScavTrap(void)$/;"	f	class:ScavTrap
