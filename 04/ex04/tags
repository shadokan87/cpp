!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AMATERIA_HPP	AMateria.hpp	/^# define AMATERIA_HPP$/;"	d
AMateria	AMateria.cpp	/^AMateria::AMateria(str const & type)$/;"	f	class:AMateria
AMateria	AMateria.cpp	/^AMateria::AMateria(void)$/;"	f	class:AMateria
AMateria	AMateria.hpp	/^class	AMateria$/;"	c
CHARACTER_HPP	Character.hpp	/^# define CHARACTER_HPP$/;"	d
Character	Character.cpp	/^Character::Character(const Character & src)$/;"	f	class:Character
Character	Character.cpp	/^Character::Character(str name)$/;"	f	class:Character
Character	Character.cpp	/^Character::Character(void) : pos(0)$/;"	f	class:Character
Character	Character.hpp	/^class	Character : public virtual ICharacter$/;"	c
ICHARACTER_HPP	ICharacter.hpp	/^# define ICHARACTER_HPP$/;"	d
ICharacter	ICharacter.hpp	/^class ICharacter$/;"	c
IMATERIASOURCE_HPP	IMateriaSource.hpp	/^# define IMATERIASOURCE_HPP$/;"	d
IMateriaSource	IMateriaSource.hpp	/^class	IMateriaSource$/;"	c
MATERIASOURCE_HPP	MateriaSource.hpp	/^# define MATERIASOURCE_HPP$/;"	d
MateriaSource	MateriaSource.cpp	/^MateriaSource::MateriaSource(const MateriaSource &src)$/;"	f	class:MateriaSource
MateriaSource	MateriaSource.cpp	/^MateriaSource::MateriaSource(void) : pos(0)$/;"	f	class:MateriaSource
MateriaSource	MateriaSource.hpp	/^class MateriaSource : public virtual IMateriaSource$/;"	c
_for_each	AMateria.hpp	/^#define _for_each(/;"	d
_for_each	Character.hpp	/^#define _for_each(/;"	d
_for_each	ICharacter.hpp	/^#define _for_each(/;"	d
_for_each	IMateriaSource.hpp	/^#define _for_each(/;"	d
_for_each	MateriaSource.hpp	/^#define _for_each(/;"	d
arr	Character.hpp	/^		AMateria *arr[4];$/;"	m	class:Character
arr	MateriaSource.hpp	/^		AMateria *arr[4];$/;"	m	class:MateriaSource
createMateria	MateriaSource.cpp	/^AMateria*	MateriaSource::createMateria(str const & type)$/;"	f	class:MateriaSource
equip	Character.cpp	/^void	Character::equip(AMateria *m)$/;"	f	class:Character
getName	Character.cpp	/^const str &Character::getName(void) const$/;"	f	class:Character
getType	AMateria.cpp	/^const str &AMateria::getType(void) const$/;"	f	class:AMateria
learnMateria	MateriaSource.cpp	/^void	MateriaSource::learnMateria(AMateria* src)$/;"	f	class:MateriaSource
main	main.cpp	/^int	main(void)$/;"	f
name	Character.hpp	/^		str name;$/;"	m	class:Character
operator =	AMateria.cpp	/^AMateria &AMateria::operator=(AMateria const & src)$/;"	f	class:AMateria
operator =	Character.cpp	/^Character &Character::operator=(const Character & src)$/;"	f	class:Character
operator =	MateriaSource.cpp	/^MateriaSource &MateriaSource::operator=(const MateriaSource &src)$/;"	f	class:MateriaSource
pos	Character.hpp	/^		int	pos;$/;"	m	class:Character
pos	MateriaSource.hpp	/^		int		pos;$/;"	m	class:MateriaSource
str	AMateria.hpp	/^typedef std::string str;$/;"	t
str	Character.hpp	/^typedef std::string str;$/;"	t
str	ICharacter.hpp	/^typedef std::string str;$/;"	t
str	IMateriaSource.hpp	/^typedef std::string str;$/;"	t
str	MateriaSource.hpp	/^typedef std::string str;$/;"	t
type	AMateria.hpp	/^		str type;$/;"	m	class:AMateria
unequip	Character.cpp	/^void	Character::unequip(int idx)$/;"	f	class:Character
use	AMateria.cpp	/^void AMateria::use(ICharacter& target)$/;"	f	class:AMateria
use	Character.cpp	/^void	Character::use(int idx, ICharacter& target)$/;"	f	class:Character
~AMateria	AMateria.cpp	/^AMateria::~AMateria(void)$/;"	f	class:AMateria
~Character	Character.cpp	/^Character::~Character(void)$/;"	f	class:Character
~ICharacter	ICharacter.hpp	/^		virtual ~ICharacter(void) {};$/;"	f	class:ICharacter
~IMateriaSource	IMateriaSource.hpp	/^		virtual				~IMateriaSource(void) {};$/;"	f	class:IMateriaSource
~MateriaSource	MateriaSource.cpp	/^MateriaSource::~MateriaSource(void)$/;"	f	class:MateriaSource
